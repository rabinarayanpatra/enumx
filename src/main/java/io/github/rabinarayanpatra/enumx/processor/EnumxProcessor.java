package io.github.rabinarayanpatra.enumx.processor;

import com.google.auto.service.AutoService;
import com.squareup.javapoet.*;
import io.github.rabinarayanpatra.enumx.annotations.*;

import javax.annotation.processing.*;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.*;
import javax.lang.model.type.TypeMirror;
import javax.tools.Diagnostic;
import java.io.IOException;
import java.util.*;
import java.util.stream.Collectors;


/**
 * Annotation processor that generates Spring REST controllers for enums marked with @EnumApi.
 */
@AutoService(Processor.class)
@SupportedAnnotationTypes("io.github.rabinarayanpatra.enumx.annotations.EnumApi")
@SupportedSourceVersion(SourceVersion.RELEASE_21)
public class EnumxProcessor extends AbstractProcessor {

    private Messager messager;
    private Filer filer;

    @Override
    public synchronized void init(ProcessingEnvironment processingEnv) {
        super.init(processingEnv);
        messager = processingEnv.getMessager();
        filer = processingEnv.getFiler();
    }

    @Override
    public SourceVersion getSupportedSourceVersion() {
        // Support latest version
        return SourceVersion.latest();
    }

    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        for (Element element : roundEnv.getElementsAnnotatedWith(EnumApi.class)) {
            if (element.getKind() != ElementKind.ENUM) {
                error(element, "@EnumApi can only be applied to enums");
                continue;
            }

            TypeElement enumElement = (TypeElement) element;
            try {
                generateController(enumElement);
            } catch (IOException e) {
                error(element, "Failed to generate controller: " + e.getMessage());
            }
        }
        return true;
    }

    private void generateController(TypeElement enumElement) throws IOException {
        EnumApi enumApi = enumElement.getAnnotation(EnumApi.class);
        String packageName = getPackageName(enumElement);
        String enumSimpleName = enumElement.getSimpleName().toString();
        String controllerName = enumSimpleName + "Controller";

        // Build controller class
        TypeSpec controller = TypeSpec.classBuilder(controllerName)
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(ClassName.get("org.springframework.web.bind.annotation", "RestController"))
                .addAnnotation(AnnotationSpec.builder(ClassName.get("org.springframework.web.bind.annotation", "RequestMapping"))
                        .addMember("value", "$S", "/api/" + enumApi.path())
                        .build())
                .addField(createEnumArrayField(enumElement))
                .addMethod(createGetAllMethod(enumElement, enumApi))
                .addMethod(createValidateMethod(enumElement))
                .addMethod(createMatchesFiltersMethod(enumElement))
                .build();

        // Write the generated controller
        JavaFile javaFile = JavaFile.builder(packageName + ".generated", controller)
                .addFileComment("Generated by EnumX - Do not modify")
                .build();

        javaFile.writeTo(filer);

        messager.printMessage(Diagnostic.Kind.NOTE,
                "Generated controller: " + packageName + ".generated." + controllerName);
    }

    private FieldSpec createEnumArrayField(TypeElement enumElement) {
        ClassName enumClassName = ClassName.get(enumElement);
        return FieldSpec.builder(ArrayTypeName.of(enumClassName), "VALUES")
                .addModifiers(Modifier.PRIVATE, Modifier.STATIC, Modifier.FINAL)
                .initializer("$T.values()", enumClassName)
                .build();
    }

    private MethodSpec createGetAllMethod(TypeElement enumElement, EnumApi enumApi) {
        ClassName enumClassName = ClassName.get(enumElement);
        ParameterizedTypeName returnType = ParameterizedTypeName.get(
                ClassName.get(List.class),
                ParameterizedTypeName.get(ClassName.get(Map.class),
                        ClassName.get(String.class), ClassName.get(Object.class))
        );

        MethodSpec.Builder method = MethodSpec.methodBuilder("getAll")
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(ClassName.get("org.springframework.web.bind.annotation", "GetMapping"))
                .addParameter(ParameterSpec.builder(
                                ParameterizedTypeName.get(Map.class, String.class, String.class), "filters")
                        .addAnnotation(ClassName.get("org.springframework.web.bind.annotation", "RequestParam"))
                        .build())
                .returns(returnType);

        // Generate method body
        method.addStatement("$T<$T<String, Object>> result = new $T<>()",
                List.class, Map.class, ArrayList.class);

        method.beginControlFlow("for ($T value : VALUES)", enumClassName);

        // Apply filters
        method.beginControlFlow("if (!matchesFilters(value, filters))");
        method.addStatement("continue");
        method.endControlFlow();

        // Build response map
        method.addStatement("$T<String, Object> item = new $T<>()", Map.class, LinkedHashMap.class);
        method.addStatement("item.put($S, value.name())", enumApi.keyField());

        // Add exposed fields
        List<VariableElement> exposedFields = getExposedFields(enumElement, enumApi);
        for (VariableElement field : exposedFields) {
            String fieldName = field.getSimpleName().toString();
            String apiName = getApiName(field);

            // Check if field has getter
            String getterName = getGetterName(field);
            if (hasMethod(enumElement, getterName)) {
                method.addStatement("item.put($S, value.$L())", apiName, getterName);
            } else {
                // Direct field access (if no getter)
                method.addStatement("item.put($S, value.$L)", apiName, fieldName);
            }
        }

        method.addStatement("result.add(item)");
        method.endControlFlow();

        method.addStatement("return result");

        return method.build();
    }

    private MethodSpec createValidateMethod(TypeElement enumElement) {
        ClassName enumClassName = ClassName.get(enumElement);
        ParameterizedTypeName returnType = ParameterizedTypeName.get(
                ClassName.get(Map.class),
                ClassName.get(String.class),
                ParameterizedTypeName.get(ClassName.get(List.class), ClassName.get(String.class))
        );

        return MethodSpec.methodBuilder("validate")
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(AnnotationSpec.builder(
                                ClassName.get("org.springframework.web.bind.annotation", "PostMapping"))
                        .addMember("value", "$S", "/validate")
                        .build())
                .addParameter(ParameterSpec.builder(
                                ParameterizedTypeName.get(List.class, String.class), "values")
                        .addAnnotation(ClassName.get("org.springframework.web.bind.annotation", "RequestBody"))
                        .build())
                .returns(returnType)
                .addStatement("$T<String> valid = new $T<>()", List.class, ArrayList.class)
                .addStatement("$T<String> invalid = new $T<>()", List.class, ArrayList.class)
                .addStatement("$T<String> enumNames = $T.stream(VALUES).map($T::name).collect($T.toSet())",
                        Set.class, Arrays.class, enumClassName, Collectors.class)
                .beginControlFlow("for (String value : values)")
                .beginControlFlow("if (enumNames.contains(value))")
                .addStatement("valid.add(value)")
                .nextControlFlow("else")
                .addStatement("invalid.add(value)")
                .endControlFlow()
                .endControlFlow()
                .addStatement("$T<String, $T<String>> result = new $T<>()",
                        Map.class, List.class, HashMap.class)
                .addStatement("result.put($S, valid)", "valid")
                .addStatement("result.put($S, invalid)", "invalid")
                .addStatement("return result")
                .build();
    }

    private MethodSpec createMatchesFiltersMethod(TypeElement enumElement) {
        ClassName enumClassName = ClassName.get(enumElement);

        return MethodSpec.methodBuilder("matchesFilters")
                .addModifiers(Modifier.PRIVATE)
                .addParameter(enumClassName, "value")
                .addParameter(ParameterizedTypeName.get(Map.class, String.class, String.class), "filters")
                .returns(boolean.class)
                .beginControlFlow("if (filters.isEmpty())")
                .addStatement("return true")
                .endControlFlow()
                .addComment("TODO: Implement actual filter logic based on @Filterable fields")
                .addStatement("return true")
                .build();
    }

    private List<VariableElement> getExposedFields(TypeElement enumElement, EnumApi enumApi) {
        List<VariableElement> exposedFields = new ArrayList<>();

        for (Element enclosedElement : enumElement.getEnclosedElements()) {
            if (enclosedElement.getKind() != ElementKind.FIELD) {
                continue;
            }

            VariableElement field = (VariableElement) enclosedElement;

            // Skip static fields
            if (field.getModifiers().contains(Modifier.STATIC)) {
                continue;
            }

            // Check if field should be exposed
            if (shouldExposeField(field, enumApi.includeAllFields())) {
                exposedFields.add(field);
            }
        }

        return exposedFields;
    }

    private boolean shouldExposeField(VariableElement field, boolean includeAllFields) {
        if (field.getAnnotation(Hide.class) != null) {
            return false;
        }

        if (field.getAnnotation(Expose.class) != null) {
            return true;
        }

        return includeAllFields;
    }

    private String getApiName(VariableElement field) {
        Expose expose = field.getAnnotation(Expose.class);
        if (expose != null && !expose.value().isEmpty()) {
            return expose.value();
        }
        return field.getSimpleName().toString();
    }

    private String getGetterName(VariableElement field) {
        String fieldName = field.getSimpleName().toString();
        String capitalizedName = Character.toUpperCase(fieldName.charAt(0)) + fieldName.substring(1);

        TypeMirror fieldType = field.asType();
        if (fieldType.toString().equals("boolean")) {
            return "is" + capitalizedName;
        }
        return "get" + capitalizedName;
    }

    private boolean hasMethod(TypeElement type, String methodName) {
        for (Element element : type.getEnclosedElements()) {
            if (element.getKind() == ElementKind.METHOD &&
                    element.getSimpleName().toString().equals(methodName)) {
                return true;
            }
        }
        return false;
    }

    private String getPackageName(TypeElement element) {
        return processingEnv.getElementUtils().getPackageOf(element).toString();
    }

    private void error(Element element, String message) {
        messager.printMessage(Diagnostic.Kind.ERROR, message, element);
    }
}